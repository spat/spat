spat-nav
  div.h-full(ref='pages')

  style(type='less').
    :scope {
      display: block;
      height: 100%;

      .spat-page {
        height: 100%;
      }
    }

  script.
    this.cachedPageTags = {};

    this.goto = async ({route, req, res, ssr=true, isPageChanging=false}) => {
      var tagName = '';
      var cached = false;

      if (typeof route.tag === 'function') {
        tagName = await route.tag({req, res});
      }
      else {
        tagName = route.tag;
      }

      if (!isPageChanging) {
        this.trigger('pagechange');
      }

      var tempPageTag = this.currentPageTag;

      // すでにページがある場合 hide する
      if (spat.isBrowser && tempPageTag) {
        tempPageTag.trigger('hide', {
          req, res
        });
        tempPageTag.root.style.display = 'none';
      }

      // タグをレンダリング
      var cacheKey = null;

      // エラーじゃないときのみキャッシュからの取得を試みる
      if (!res.error) {
        // route に関数があればそっちを実行する. なければ req.Url.pathname を cache key とする
        cacheKey = route.cacheKey ? route.cacheKey({route, req, res}) : req.Url.pathname;
      }
      var currentPageTag = cacheKey ? this.getCachedPageTag(cacheKey) : null;

      if (currentPageTag) {
        currentPageTag.root.style.display = '';
        cached = true;
      }
      else {
        var element = document.createElement('div');
        element.setAttribute('data-is', tagName);
        element.setAttribute('class', 'spat-page');
        element.setAttribute('cache-key', cacheKey);
        currentPageTag = riot.mount(element, tagName)[0];
        this.refs.pages.appendChild(element);
      }

      // current となるページをセット
      this.currentPageTag = currentPageTag;

      // preload 実行
      try {
        // ssr が true のときのみ preload を実行
        if (ssr) {
          await this.preload(currentPageTag, {
            req, res, cached,
          }, route.useServerSideData);

          // redirect がかかっていたら非表示にして以降をスキップ
          if (res.statusCode === 301 || res.statusCode === 302) {
            currentPageTag.root.style.display = 'none';
            return ;
          }
        }

        if (this.currentPageTag === currentPageTag) {
          // head 設定
          this.trigger('pagechanged', {});

          // 最後にキャッシュする(エラーページ以外)
          if (spat.isBrowser && !res.error) {
            this.setCachedPageTag(this.currentPageTag);
          }
        }
        // 非同期処理終了後に, 別のページになっていた場合は非表示に戻す(すぐにスワイプバックされたとき等)
        else {
          // TODO: hide も実行する
          currentPageTag.root.style.display = 'none';
        }
      }
      catch(e) {
        // 非表示に戻す
        currentPageTag.root.style.display = 'none';

        // console にも出す
        console.error(e);

        res.error = e;
        // エラーが出たら page-error を表示する
        var errorRoute = {
          tag: 'page-error'
        };
        await this.goto({route: errorRoute, req, res, isPageChanging: true});
      }

      // show イベントを発火
      if (spat.isBrowser && this.currentPageTag === currentPageTag) {
        this.currentPageTag.trigger('show', {
          req, res, cached
        });
        this.currentPageTag.update();
      }

      return {
        cached,
      };
    };

    // ページタグをキャッシュ
    this.setCachedPageTag = (tag) => {
      if (tag.opts.cacheKey) {
        this.cachedPageTags[tag.opts.cacheKey] = tag;
      }
    };

    // ページタグを取得
    this.getCachedPageTag = (cacheKey) => {
      return this.cachedPageTags[cacheKey];
    };

    // preload を再帰呼び出し
    this.preload = async (tag, opts, preloadCache = false) => {
      if (tag.preload) {
        var data;
        //- SSR で展開したデータを入れる
        if (preloadCache && spat.isBrowser && spat._preload_cache) {
          data = spat._preload_cache;
          //- 一回使ったら消す
          delete spat._preload_cache;
        }
        else {
          data = await tag.preload(opts);
        }
        //- SSR 時に展開するためのデータ
        if (preloadCache && spat.isNode) {
          this._preloadCache = data;
        }
        Object.assign(tag, data);
        tag.update();
      }

      // すべてのタグをまとめて配列化
      var tags = _.flatten(Object.values(tag.tags));

      // 子タグがない場合は何もしない
      if (tags.length <= 0) return ;

      // preload する
      var promises = tags.map(async (tag) => {
        return this.preload(tag, opts);
      });

      await Promise.all(promises);
    };

    this.getHead = () => {
      var tag = this.currentPageTag;
      if (!tag) return spat.config.head;

      var head = {};
      spat.utils.extendDeep(head, spat.config.head);
      if (tag.head) {
        var data = tag.head();
        spat.utils.extendDeep(head, data);
      }

      return head;
    };

    this.on('before-unmount', () => {
      //- node.js は sdom の実装がDOMと違うので分岐してそれぞれ処理
      if (spat.isNode) {
        let nodes = [];
        for (let i = 0, node; node = this.refs.pages.childNodes.item(i); ++i) {
          nodes.push(node);
        }
        nodes.forEach(node => {
          if (node._tag) {
            node._tag.unmount();
          }
        });
      }
      else {
        [...this.refs.pages.children].forEach(element => {
          if (element._tag) {
            element._tag.unmount();
          }
        });
      }
    });
