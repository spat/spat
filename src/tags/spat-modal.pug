spat-modal(show="{visible}")

  style(type='less').
    :scope {
      transform: translate3d(0, 0, 0);

      position: fixed;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;

      display: block;
      z-index: 9999;

      .modal-content {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }

      @keyframes modal-fade-in {
        0% { opacity: 0; }
        100% { opacity: 1; }
      }
      @keyframes modal-fade-out {
        0% { opacity: 1; }
        100% { opacity: 0; }
      }

      @keyframes modal-push-in {
        0% { transform: translateY(200px); opacity: 0; }
        100% { transform: translateY(0px); opacity: 1; }
      }
      @keyframes modal-push-out {
        0% { transform: translateY(0px); opacity: 1; }
        100% { transform: translateY(200px); opacity: 0; }
      }

      @keyframes modal-left-in {
        0% { transform: translateX(-200px); opacity: 0; }
        100% { transform: translateX(0px); opacity: 1; }
      }
      @keyframes modal-left-out {
        0% { transform: translateX(0px); opacity: 1; }
        100% { transform: translateX(-200px); opacity: 0; }
      }

      @keyframes modal-right-in {
        0% { transform: translateX(200px); opacity: 0; }
        100% { transform: translateX(0px); opacity: 1; }
      }
      @keyframes modal-right-out {
        0% { transform: translateX(0px); opacity: 1; }
        100% { transform: translateX(200px); opacity: 0; }
      }
    }
  
  script.
    this.DEFAULT_BEFOREUNLOAD_MESSAGE = 'この画面を閉じますか？\n行った変更が保存されない可能性があります。';

    this.on('mount', () => {
      if (spat.isBrowser) {
        // キーボードを押した際の挙動
        window.addEventListener('keydown', (e) => {
          // ESC
          if (e.keyCode === 27) {
            var modalTag = this.getCurrentModalTag();

            // dismissible が true のモノのみ ESC で閉じれるようにする 
            if (modalTag && modalTag.opts.dismissible) {
              e.preventDefault();
              modalTag.close();
            }
          }
        });
      }
    });

    this.open = (tagName, options) => {
      var _options = Object.assign({
        dismissible: true,
      }, options);

      var element = document.createElement('div');
      this.root.appendChild(element);

      var modalTag = riot.mount(element, tagName, _options)[0];
      element.classList.add('modal-content');

      // アニメーション
      var animation = element.getAttribute('spat-animation') || 'push';

      if (animation !== 'undefined') {
        modalTag.refs.modal.style.animation = `modal-${animation}-in 256ms`;
      }

      modalTag.promise = new Promise((resolve) => {
        modalTag.close = async () => {
          // close 中だったら何もしない
          if (modalTag.isClose) return ;

          //- beforeunload
          const event = { type: 'beforeunload' };
          modalTag.trigger(event.type, event);
          // returnValue がある場合は confirm を表示する
          if (event.returnValue) {
            let message = this.DEFAULT_BEFOREUNLOAD_MESSAGE;
            if (typeof event.returnValue === 'string') {
              message = event.returnValue;
            }
            // キャンセル時は何もしない
            if (!await spat.modal.confirm(message)) {
              return ;
            }
          }

          modalTag.isClose = true;
          var value = modalTag.value;

          await this.close(modalTag);
          resolve(value);

          return value;
        };
        modalTag.waitClose = () => {
          return modalTag.promise;
        };
        modalTag.update();
      });

      // dismissible: true のときは背景 click で閉じれるようにする
      if (_options.dismissible) {
        modalTag.root.addEventListener('click', (e) => {
          // 自分自身(tag.root)のイベントのときのみクローズする
          if (e.currentTarget === e.target) {
            modalTag.close();
          }
        });
      }

      // 表示更新
      this.update({visible: true});

      // デフォルトで modal の枠に focus しておく (ボタン連打等の対策)
      element.tabIndex = '-1';
      element.focus();

      // スクロールを止める
      document.documentElement.style.overflow = 'hidden';

      return modalTag;
    };

    this.close = (modalTag) => {
      return new Promise(resolve => {
        // アニメーション
        var animation = modalTag.root.getAttribute('spat-animation') || 'push';

        if (animation !== 'undefined') {
          modalTag.refs.modal.style.animation = `modal-${animation}-out 128ms forwards`;

          modalTag.refs.modal.addEventListener('animationend', (e) => {
            this._unmount(modalTag);
            resolve();
          });
        }
        else {
          this._unmount(modalTag);
          resolve();
        }
      });
    };

    this._unmount = (modalTag) => {
      modalTag.unmount();

      // モーダルが全てなくなっていたら非表示にする
      if (this.root.childNodes.length <= 0) {
        this.update({visible: false});
        // スクロール復活
        document.documentElement.style.overflow = '';
      }
    };

    this.getCurrentModalTag = () => {
      var children = this.root.children;
      for (let i = children.length - 1; i >= 0; --i) {
        var child = children[i];
        if (child && child._tag && !child._tag.isClose) {
          return child._tag;
        }
      }
    };

    this.alert = (message, title, options) => {
      // タグ名をきめる
      var templates = riot.util.templates;
      var template = templates['alert'] || templates['modal-alert'] || templates['spat-modal-alert'];
      // オプションを作成
      var _options = {message, title, ...options};
      var modal = this.open(template.name, _options);

      return modal.waitClose();
    };

    this.confirm = (message, title, options) => {
      // タグ名をきめる
      var templates = riot.util.templates;
      var template = templates['confirm'] || templates['modal-confirm'] || templates['spat-modal-confirm'];
      // オプションを作成
      var _options = {message, title, ...options};
      var modal = this.open(template.name, _options);
      
      return modal.waitClose();
    };

    this.prompt = (message, title, options) => {
      // タグ名をきめる
      var templates = riot.util.templates;
      var template = templates['prompt'] || templates['modal-prompt'] || templates['spat-modal-prompt'];
      // オプションを作成
      var _options = {message, title, ...options};
      var modal = this.open(template.name, _options);
      
      return modal.waitClose();
    };

    this.indicator = (options) => {
      // タグ名をきめる
      var templates = riot.util.templates;
      var template = templates['indicator'] || templates['modal-indicator'] || templates['spat-modal-indicator'];
      // オプションを作成
      var _options = {...options};

      _options.dismissible = false;

      var modal = this.open(template.name, _options);
      
      return modal;
    };

spat-modal-alert.f.fh(spat-animation='push')
  div.rounded-8(ref='modal')
    div.p16.border
      div.bold.fs16.text-center.mb8(if='{opts.title}') {opts.title}
      p.text-center.white-space-pre-wrap.word-break-word {opts.message}
    div.w-full.h44
      button.s-full(onclick='{close}') OK

  style(type='less').
    :scope {
      background-color: rgba(0, 0, 0, 0.5);

      [ref='modal'] {
        background-color: rgba(255, 255, 255, 0.90);
        max-width: 300px;
        width: 100%;
      }
    }
  
  script.
    this.on('mount', () => {

    });

spat-modal-confirm.f.fh(spat-animation='push')
  div.rounded-8(ref='modal')
    div.p16.border
      div.bold.fs16.text-center.mb8(if='{opts.title}') {opts.title}
      p.text-center {opts.message}
    div.w-full.h44.f
      button.s-full.border-right(onclick='{cancel}') Cancel
      button.s-full.bold(onclick='{ok}') OK

  style(type='less').
    :scope {
      background-color: rgba(0, 0, 0, 0.5);

      [ref='modal'] {
        background-color: rgba(255, 255, 255, 0.90);
        max-width: 300px;
        width: 100%;
      }
    }
  
  script.
    this.on('mount', () => {
      // default value
      this.value = false;
    });

    this.ok = () => {
      this.value = true;
      this.close();
    };
    this.cancel = () => {
      this.value = false;
      this.close();
    };


spat-modal-prompt.f.fh(spat-animation='push')
  div.rounded-8(ref='modal')
    div.p16.border
      div.bold.fs16.text-center.mb8(if='{opts.title}') {opts.title}
      p.text-center.mb16 {opts.message}
      div
        input.bg-white.w-full.fs15.border.px8.py4(ref='input', type='text', autofocus)
    div.w-full.h44.f
      button.s-full.border-right(onclick='{cancel}') Cancel
      button.s-full.bold(onclick='{ok}') OK

  style(type='less').
    :scope {
      background-color: rgba(0, 0, 0, 0.5);

      [ref='modal'] {
        background-color: rgba(255, 255, 255, 0.90);
        max-width: 300px;
        width: 100%;
      }
    }
  
  script.
    this.on('mount', () => {
      // default value
      this.value = '';

      this.refs.input.focus();
    });

    this.ok = () => {
      this.value = this.refs.input.value;
      this.close();
    };
    this.cancel = () => {
      this.value = '';
      this.close();
    };


spat-modal-indicator.f.fh(spat-animation='fade')
  div(ref='modal')
    div.fs24.text-white ...

  style(type='less').
    :scope {
      background-color: rgba(0, 0, 0, 0.75);

      [ref='modal'] {

      }
    }
  
  script.
    this.on('mount', () => {
    });
